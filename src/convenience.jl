to_toml(x::Any) = string(x)
to_toml(x::Union{Integer, AbstractFloat, Date, DateTime, Time}) = x
to_toml(x::Union{Tuple, AbstractSet}) = [to_toml(v) for v in x]
to_toml(x::AbstractArray) = vec([to_toml(v) for v in x])
to_toml(x::Union{NamedTuple, AbstractDict}) = Dict(k => to_toml(v) for (k, v) in pairs(x))

"""
    meta2toml(table, style::Bool=true)

Store table-level and column-level metadata of `table` in a string using TOML.
Non-standard values stored in the metadata are converted as follows:
* tuples, sets, and arrays to vectors
* named tuples to dictionaries
* all other types to `string`.

The `style` keyword argument (`true` by default) determines if metadata style
is saved.

The created TOML has three top level keys:
* `metadata` for table-level metadata key-value pairs;
* `colmetadata` for column-level metadata; for each column that has metadata
  an associated value are metadata key-value pairs;
* `style` storing information about value of `style` keyword argument used.

See also: [`toml2meta!`](@ref)
```
"""
function meta2toml(table; style::Bool=true)
    allmeta = Dict("metadata" => DataAPI.metadata(table, style=style),
                   "colmetadata" => Dict(string(k) => v for (k, v) in DataAPI.colmetadata(table, style=style)),
                   "style" => style)
    io = IOBuffer()
    TOML.print(to_toml, io, allmeta, sorted=true)
    return String(take!(io))
end

"""
    toml2meta!(table, toml::Union{AbstractString, IO})

Store table-level and column-level metadata represented in TOML and passed
in `toml` to `table` (discarding all previously present metadata).

The funcion assumes that `toml` is a properly formatted TOML, typically
previously generated by [`meta2toml`](@ref).

See also: [`meta2toml`](@ref)
"""
function toml2meta!(table, toml::Union{AbstractString, IO})
    allmeta = TOML.parse(toml)
    allmeta["colmetadata"] = Dict(Symbol(k) => v for (k, v) in allmeta["colmetadata"])
    dict2metadata!(table, allmeta["metadata"], style=allmeta["style"])
    dict2colmetadata!(table, allmeta["colmetadata"], style=allmeta["style"])
    return table
end

"""
    dict2metadata!(table, dict; style::Bool=false, defaultstyle::Symbol=:default)

Store table-level metadata stored in `dict` in `table`
(discarding all previously present table-level metadata).

`style` keyword argument indicates if `dict` has style information (`false` by
default). If `style` is `false` then `defaultstyle` (`:default` by default) is
used when setting metadata style.

The funcion assumes that `dict` stores key-value metadata; it is typically
previously generated by the `metadata` function.

See also: [`dict2colmetadata!`](@ref)
"""
function dict2metadata!(table, dict; style::Bool=false, defaultstyle::Symbol=:default)
    DataAPI.emptymetadata!(table)

    for (metakey, metavalue) in pairs(dict)
        if style
            value, vstyle = metavalue
        else
            value, vstyle = metavalue, defaultstyle
        end
        DataAPI.metadata!(table, metakey, value, style=vstyle)
    end

    return table
end

"""
    dict2colmetadata!(table, dict; style::Bool=false, defaultstyle::Symbol=:default)

Store column-level metadata stored in `dict` in `table`
(discarding all previously present column-level metadata).

`style` keyword argument indicates if `dict` has style information (`false` by
default). If `style` is `false` then `defaultstyle` (`:default` by default) is
used when setting metadata style.

The funcion assumes that `dict` stores key-value pairs, where key is column name
and value are dictionaries storing metadata key-value pairs; it is typically
previously generated by the `colmetadata` function.

See also: [`dict2metadata!`](@ref)
"""
function dict2colmetadata!(table, dict; style::Bool=false, defaultstyle::Symbol=:default)
    DataAPI.emptycolmetadata!(table)

    for col in keys(dict)
        for (colmetakey, colmetavalue) in pairs(dict[col])
            if style
                value, vstyle = colmetavalue
            else
                value, vstyle = colmetavalue, defaultstyle
            end
            DataAPI.colmetadata!(table, col, colmetakey, value, style=vstyle)
        end
    end

    return table
end

